class Bird extends MovieClip{		private var self:MovieClip;	private var pace:Number;	public var flip:Number;	private var state:String;	private var loop:String;	private var angle:Number;	private var grounded:Boolean;	private var tick:Number;	private var tickStop:Number;	private var tree:MovieClip;	private var treeY:Number;	function Bird(){		trace ("new bird");		self = this;		_xscale=7;		_yscale=7;		pace = 2;		if (_parent.classObj.groundGrown==false or Math.random()<.5){			_x = -5;			flip=1;		} else {			_x = _parent.w+5;			flip=-1;		}		_xscale*=flip;		_alpha=60;		_y = Math.round(_parent.h/5+random(_parent.h/3));		//trace (self +" start = "+_x+", "+_y);		angle = Math.random()*Math.PI/3;		if (flip==-1){			angle = Math.PI-angle;		}		//trace (self +" angle = "+angle);		state = "fly";		loop = "fly"		gotoAndPlay("fly");		onEnterFrame = function(){			birdBehavior();		}	}		public function birdBehavior():Void{		if (grounded!=true and _parent.G.getGroundY(Math.round(_x))<_y+pace*Math.sin(angle)){			_y = _parent.G.getGroundY(Math.round(_x));			state = "still";			loop = "still";			tick = 0;			tickStop = 120+random(480);			gotoAndStop("still");			grounded=true;			break;		}		switch (state){			case "fly":				if (_x<-6 or _x>_parent.w+6 or _y<-6){					destroy();					break;				}								_x+=pace*Math.cos(angle);				_y+=pace*Math.sin(angle);				if (angle>5*Math.PI/4 and angle<=3*Math.PI/2){					angle-=1;				}				if (angle>3*Math.PI/2 and angle<7*Math.PI/4){					angle+=1;				}				if (angle>2*Math.PI){					angle-=2*Math.PI;				}				if (angle<0){					angle+=2*Math.PI;				}				if (self.hitTest(_parent.jogger) or self.hitTest(_parent.dog)){					angle-=1*flip;				}				if (random(10)==1){					angle+=(-3+random(7))/10;					if (Math.cos(angle)*flip<-0.1){						flip*=-1;						_xscale*=-1;					}				}				if (_parent.raining==true or _y>_parent.h/3 and random(100)==1){					state="tree";					loop = "fly";					tree = _parent["tree"+(random(_parent.G.getTrees())+1)];					//trace (b+" to land in "+tree);					if (_parent.raining!=true){						treeY = tree._y-tree._height;					} else {						treeY = tree._y-tree.stem._height;					}				}				break;			case "still":				if (_parent.raining and grounded!=true){					return;				}				tick++;				if (tick==tickStop or (grounded==true and (Math.abs(_x-_parent.jogger._x)<10 or 																 Math.abs(_x-_parent.dog._x)<10))){					angle = 2*Math.PI-Math.random()*Math.PI;					//trace ("bird angle = "+angle);					grounded=false;					state="fly";					loop = "fly";					gotoAndPlay("fly");				}				break;			case "tree":				if (tree.circle.hitTest(self) and Math.abs(_x-tree._x)<tree.circle._width/3){					//trace ("hit tree");					state = "still";					loop = "still";					tick = 0;					tickStop = 120+random(480);					gotoAndStop("still");					break;				}  				_x+=pace*Math.cos(angle);				_y+=pace*Math.sin(angle);				var a = Math.atan((treeY-_y)/(tree._x-_x));				if ((a<0 and tree._x<_x) or (treeY<_y and tree._x<_x)){					a+=Math.PI;				}				if (angle<a){					angle+=0.1;				} else {					angle-=0.1;				}				//trace ("angle = "+angle);				if (Math.cos(angle)*flip<-0.1){					flip*=-1;					_xscale*=-1;				}		}	}		public function destroy():Void{		trace ("destroyed "+self);		delete onEnterFrame;		self.removeMovieClip();	}}