class Rainbow {		private var classObj:Object;	private var parentMC:MovieClip;	private var rainbow:MovieClip;	private var strength:Number;	private var duration:Number;	private var startTime:Number;	private var centerX:Number;	private var centerY:Number;	private var radius:Number;	private var size:Number;	private var angle:Number;	private var angleInc:Number;	private var radians:Number;	private var segment:Number;	private var stopSegment:Number;	private var colorArray:Array;	private var stopCount:Number;		function Rainbow(pMC:MovieClip,					 s:Number,					 d:Number){		if (pMC.raining==true){			return;		}		trace ("new Rainbow");		parentMC = pMC;		strength = s;		duration = d;		pMC.hasRainbow=true;		classObj = this;		centerX = pMC.w/2;		centerY = pMC.h;		radius = (5*pMC.w/Stage.height)+pMC.w/2;		size = 1*pMC.w/Stage.height;		angle = 180;		angleInc = .4;		segment = 0;		colorArray = new Array(0xFF0033,0xFF9933,0xFFFF00,0x66FF00,0x0066FF,0x9900FF,0xFF00FF);		stopCount=0;		rainbow = pMC.createEmptyMovieClip("rainbow",7000);		rainbow._visible=false;		rainbow.classObj = this;		makeArcs();		showRainbow();	}		private function makeArcs():Void{		for (var i=0;i<colorArray.length;i++){			var color = colorArray[i];			if (colorArray[i]==0){				continue;			}			var cradius = radius-(size*i);			//trace ("color = "+color+", cradius = "+cradius);			var line:MovieClip = rainbow.createEmptyMovieClip("line"+i,i);				line.lineStyle(size+1,color,100,false,"normal","none","bevel");			line.moveTo(centerX+cradius*Math.cos(getRadians(170)),centerY-cradius*Math.sin(getRadians(170)));			for (var a=170;a>0;a-=angleInc){				var endX = centerX+cradius*Math.cos(getRadians(a));				var endY = centerY-cradius*Math.sin(getRadians(a));				line.lineTo(endX,endY);				if (endX>centerX and endY+1>=parentMC.G.getGroundY(Math.floor(endX))){					line.lineStyle(undefined);					break;				}				if (endX<centerX and endY-1>=parentMC.G.getGroundY(Math.ceil(endX))){					line.lineStyle(undefined);				} else {					line.lineStyle(size+1,color,100,false,"normal","none","bevel");				}			}		}	}		public function showRainbow(){		trace ("show rainbow");		rainbow._alpha=0;		rainbow._visible=true;		rainbow.alpha=0;		rainbow.tick=0;		rainbow.onEnterFrame = function(){			this.alpha+=.03*this.classObj.strength;			this._alpha=this.alpha;			if (this.alpha>=10+this.classObj.strength*3){				trace ("stop rainbow fade in");				delete this.onEnterFrame;				this.classObj.timeRainbow();			}		}			}		private function timeRainbow(){		startTime = getTimer();		rainbow.onEnterFrame = function(){			this.classObj.checkTime();		}	}		private function checkTime(){		var sec = (getTimer()-startTime)/1000;		if (sec>=duration){			fadeRainbow();		}	}		public function fadeRainbow(){		if (rainbow.fading==true){			return;		}		rainbow.fading=true;		trace ("fade rainbow");		rainbow.alpha=10+strength*3;		rainbow.onEnterFrame = function(){			this.alpha-=.03*this.classObj.strength;			this._alpha=this.alpha;			if (this.alpha<=0){				trace ("stop rainbow fade out");				this.classObj.destroy();			}		}	}		private function getRadians(a):Number{		return ( a*Math.PI/180 );	}		public function destroy(){		trace ("destroy rainbow");		delete rainbow.onEnterFrame;		parentMC.hasRainbow=false;		parentMC.rainbow.removeMovieClip();		delete classObj;	}}